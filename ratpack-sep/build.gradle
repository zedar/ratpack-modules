
apply plugin: "java"
apply plugin: "idea"
apply plugin: "maven-publish"
apply plugin: "groovy"
apply plugin: "checkstyle"

if (!JavaVersion.current().java6Compatible) {
  throw new IllegalStateException("Must be built at least with Java 8")
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "ratpack-modules"
version = "0.1-SNAPSHOT"

repositories {
  jcenter()
}

def ratpackVersion = "0.9.16"

dependencies {
  compile "io.ratpack:ratpack-core:${ratpackVersion}"
  compile "io.ratpack:ratpack-guice:${ratpackVersion}"
  compile "io.ratpack:ratpack-jackson:${ratpackVersion}"

  compile 'org.slf4j:slf4j-api:1.7.12'

  testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
  testCompile "io.ratpack:ratpack-groovy-test:${ratpackVersion}"
}

idea {
  project {
    languageLevel "1.8"
  }
}

// ---------------------------------------------------------------------------------------------------------------------
// maven repository publication
// ---------------------------------------------------------------------------------------------------------------------

def moduleInfo = [
  description: "Service execution patterns module for Ratpack framework",
  url: "https://github.com/zedar/ratpack-modules/ratpack-sep",
  issues: "https://github.com/zedar/ratpack-modules/issues",
  tags: ["ratpack", "async", "service", "pattern"],
  scm: [
    url: "git@github.com/zedar/ratpack-modules.git",
    mavenUrl: "scm:git@github.com:zedar:ratpack-modules.git"
  ],
  license: [
    shortName: "Apache-2.0",
    fullName: "The Apache Software License, Version 2.0",
    url: "http://www.apache.org/licenses/LICENSE-2.0.txt"
  ]
]

task sourceJar(type: Jar) {
  from sourceSets.main.allSource
  classifier "sources"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  from javadoc.destinationDir
  classifier "javadoc"
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourceJar
      artifact javadocJar

      pom.withXml {
        asNode().children().last() + {
          resolveStrategy = Closure.DELEGATE_FIRST // change closure resolver so first th delegate (not the owner) is used.

          name project.name
          description moduleInfo.description
          url moduleInfo.url

          scm {
            connection moduleInfo.scm.mavenUrl
            developerConnection moduleInfo.scm.mavenUrl
            url moduleInfo.scm.url
          }

          licenses {
            license {
              name moduleInfo.license.fullName
              url moduleInfo.license.url
            }
          }

          // List of core committers
          developers {
            if (project.hasProperty("developerName")) {
              developer {
                name developerName
                email developerEmail
                organization developerOrganization
                organizationUrl developerOrganizationUrl
              }
            }
          }

          // List of contributors
          contributors {
          }
        }
      }
    }
  }

  repositories {
    maven {
      url "$buildDir/repo"
    }
  }
}

// ---------------------------------------------------------------------------------------------------------------------
// checkstyle
// ---------------------------------------------------------------------------------------------------------------------

def checkstyleConfigDir = new File(buildscript.sourceFile.parentFile, 'config/checkstyle')

checkstyle {
  configFile = new File(checkstyleConfigDir, "checkstyle.xml")
  configProperties.checkstyleConfigDir = checkstyleConfigDir
}

